{"version":3,"sources":["views/RegisterView.module.css","views/RegisterView.js"],"names":["module","exports","RegisterView","state","name","email","password","handleChange","event","currentTarget","value","setState","handleSubmit","preventDefault","props","onRegister","resetForm","this","className","styles","container","themeLight","form","formDark","onSubmit","autoComplete","label","t","input","type","onChange","registrationError","error","btn","btnDark","Component","mapDispatchToProps","authOperations","register","withTranslation","connect","getTheme","authSelectors","getErrorMessage"],"mappings":"mIACAA,EAAOC,QAAU,CAAC,UAAY,gCAAgC,KAAO,2BAA2B,SAAW,+BAA+B,MAAQ,4BAA4B,MAAQ,4BAA4B,IAAM,0BAA0B,QAAU,8BAA8B,MAAQ,8B,mJCQ5RC,E,4MAQJC,MAAQ,CACNC,KAAM,GACNC,MAAO,GACPC,SAAU,I,EAGZC,aAAe,SAACC,GAAW,IAAD,EACAA,EAAMC,cAAtBL,EADgB,EAChBA,KAAMM,EADU,EACVA,MACd,EAAKC,SAAL,eACGP,EAAOM,K,EAIZE,aAAe,SAACJ,GACdA,EAAMK,iBACN,EAAKC,MAAMC,WAAW,EAAKZ,OAC3B,EAAKa,a,EAGPA,UAAY,WACV,EAAKL,SAAS,CAAEP,KAAM,GAAIC,MAAO,GAAIC,SAAU,M,4CAGjD,WAAU,IAAD,EAC2BW,KAAKd,MAA/BC,EADD,EACCA,KAAMC,EADP,EACOA,MAAOC,EADd,EACcA,SACrB,OACE,qBAAKY,UAAWC,IAAOC,UAAvB,SACE,uBACEF,UAAWD,KAAKH,MAAMO,WAAaF,IAAOG,KAAOH,IAAOI,SACxDC,SAAUP,KAAKL,aACfa,aAAa,MAHf,UAKE,wBAAOP,UAAWC,IAAOO,MAAzB,UACGT,KAAKH,MAAMa,EAAE,oBACd,uBACET,UAAWC,IAAOS,MAClBC,KAAK,OACLzB,KAAK,OACLM,MAAON,EACP0B,SAAUb,KAAKV,kBAGnB,wBAAOW,UAAWC,IAAOO,MAAzB,UACGT,KAAKH,MAAMa,EAAE,qBACd,uBACET,UAAWC,IAAOS,MAClBC,KAAK,OACLzB,KAAK,QACLM,MAAOL,EACPyB,SAAUb,KAAKV,kBAGnB,wBAAOW,UAAWC,IAAOO,MAAzB,UACGT,KAAKH,MAAMa,EAAE,wBACd,uBACET,UAAWC,IAAOS,MAClBC,KAAK,WACLzB,KAAK,WACLM,MAAOJ,EACPwB,SAAUb,KAAKV,kBAGlBU,KAAKH,MAAMiB,mBACV,mBAAGb,UAAWC,IAAOa,MAArB,SAA6Bf,KAAKH,MAAMiB,oBAE1C,wBACEb,UAAWD,KAAKH,MAAMO,WAAaF,IAAOc,IAAMd,IAAOe,QACvDL,KAAK,SAFP,SAIGZ,KAAKH,MAAMa,EAAE,8B,GA7ECQ,aA2FrBC,EAAsB,CAC5BrB,WAAYsB,IAAeC,UAIZC,wBACbC,aAZsB,SAAArC,GACpB,MAAO,CACHkB,WAAYoB,YAAStC,GACrB4B,kBAAmBW,IAAcC,gBAAgBxC,MAS9BiC,EAAzBI,CAA6CtC","file":"static/js/register-view.0eaf2b18.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"RegisterView_container__poo8e\",\"form\":\"RegisterView_form__TM3g0\",\"formDark\":\"RegisterView_formDark__3KI_G\",\"label\":\"RegisterView_label__3Dzya\",\"input\":\"RegisterView_input__1KNP1\",\"btn\":\"RegisterView_btn__3n_jf\",\"btnDark\":\"RegisterView_btnDark__1z6WD\",\"error\":\"RegisterView_error__200Tc\"};","import { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withTranslation } from 'react-i18next';\nimport PropTypes from 'prop-types';\nimport { getTheme } from '../redux/theme/theme-selectors';\nimport { authOperations, authSelectors } from '../redux/auth';\nimport styles from './RegisterView.module.css';\n\n\nclass RegisterView extends Component {\n  static propTypes = {\n    themeLight: PropTypes.bool.isRequired,\n    t: PropTypes.func,\n    onRegister: PropTypes.func.isRequired,\n    registrationError: PropTypes.string\n  };\n\n  state = {\n    name: \"\",\n    email: \"\",\n    password: \"\",\n  };\n\n  handleChange = (event) => {\n    const { name, value } = event.currentTarget;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    this.props.onRegister(this.state);\n    this.resetForm();\n  };\n\n  resetForm = () => {\n    this.setState({ name: \"\", email: \"\", password: \"\" });\n  };\n\n  render() {\n    const { name, email, password } = this.state;\n    return (\n      <div className={styles.container}>\n        <form\n          className={this.props.themeLight ? styles.form : styles.formDark}\n          onSubmit={this.handleSubmit}\n          autoComplete=\"off\"\n        >\n          <label className={styles.label}>\n            {this.props.t(\"registerFormName\")}\n            <input\n              className={styles.input}\n              type=\"text\"\n              name=\"name\"\n              value={name}\n              onChange={this.handleChange}\n            />\n          </label>\n          <label className={styles.label}>\n            {this.props.t(\"registerFormEmail\")}\n            <input\n              className={styles.input}\n              type=\"text\"\n              name=\"email\"\n              value={email}\n              onChange={this.handleChange}\n            />\n          </label>\n          <label className={styles.label}>\n            {this.props.t(\"registerFormPassword\")}\n            <input\n              className={styles.input}\n              type=\"password\"\n              name=\"password\"\n              value={password}\n              onChange={this.handleChange}\n            />\n          </label>\n          {this.props.registrationError && (\n            <p className={styles.error}>{this.props.registrationError}</p>\n          )}\n          <button\n            className={this.props.themeLight ? styles.btn : styles.btnDark}\n            type=\"submit\"\n          >\n            {this.props.t(\"registerFormBtn\")}\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n    return {\n        themeLight: getTheme(state),\n        registrationError: authSelectors.getErrorMessage(state)\n    };\n};\nconst mapDispatchToProps =  {\nonRegister: authOperations.register\n}\n\n\nexport default withTranslation()(\n  connect(mapStateToProps, mapDispatchToProps)(RegisterView)\n);\n"],"sourceRoot":""}